// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  // A user can be part of many boards
  boards Board[] @relation("UserBoards")

  // A user can be assigned to many tasks
  tasks Task[]  @relation("TaskAssignees")
  
  Board Board[]
  Task  Task[]

  @@map("users")
}

model Board {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  userId    String?

  // A board can have one owner (optional)
  User User? @relation(fields: [userId], references: [id])

  // A board can have many members (users)
  members User[] @relation("UserBoards")

  // A board can have many tasks
  tasks Task[]

  @@map("boards")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  startDate   DateTime?
  endDate     DateTime?
  priority    Priority?  @default(MEDIUM)
  status      TaskStatus @default(TO_DO)
  boardId     String
  userId      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt

  // A task belongs to a board
  board Board @relation(fields: [boardId], references: [id])

  // A task can be assigned to one user (optional)
  User User? @relation(fields: [userId], references: [id])

  // A task can have many assignees
  assignees User[] @relation("TaskAssignees")

  @@map("tasks")
}

enum TaskStatus {
  TO_DO
  DOING
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
